/* 
 * ws-treasure
 *
 * tresure api
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Map
    /// </summary>
    [DataContract]
        public partial class Map :  IEquatable<Map>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Map" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="start">start (required).</param>
        /// <param name="end">end (required).</param>
        /// <param name="active">active (required).</param>
        /// <param name="roundInterval">roundInterval (required).</param>
        /// <param name="closedtTreasures">closedtTreasures (required).</param>
        /// <param name="openedTreasure">openedTreasure (required).</param>
        public Map(string id = default(string), string start = default(string), string end = default(string), string active = default(string), string roundInterval = default(string), List<Treasure> closedtTreasures = default(List<Treasure>), List<OpenTreasure> openedTreasure = default(List<OpenTreasure>))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for Map and cannot be null");
            }
            else
            {
                this.Id = id;
            }
            // to ensure "start" is required (not null)
            if (start == null)
            {
                throw new InvalidDataException("start is a required property for Map and cannot be null");
            }
            else
            {
                this.Start = start;
            }
            // to ensure "end" is required (not null)
            if (end == null)
            {
                throw new InvalidDataException("end is a required property for Map and cannot be null");
            }
            else
            {
                this.End = end;
            }
            // to ensure "active" is required (not null)
            if (active == null)
            {
                throw new InvalidDataException("active is a required property for Map and cannot be null");
            }
            else
            {
                this.Active = active;
            }
            // to ensure "roundInterval" is required (not null)
            if (roundInterval == null)
            {
                throw new InvalidDataException("roundInterval is a required property for Map and cannot be null");
            }
            else
            {
                this.RoundInterval = roundInterval;
            }
            // to ensure "closedtTreasures" is required (not null)
            if (closedtTreasures == null)
            {
                throw new InvalidDataException("closedtTreasures is a required property for Map and cannot be null");
            }
            else
            {
                this.ClosedtTreasures = closedtTreasures;
            }
            // to ensure "openedTreasure" is required (not null)
            if (openedTreasure == null)
            {
                throw new InvalidDataException("openedTreasure is a required property for Map and cannot be null");
            }
            else
            {
                this.OpenedTreasure = openedTreasure;
            }
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Start
        /// </summary>
        [DataMember(Name="start", EmitDefaultValue=false)]
        public string Start { get; set; }

        /// <summary>
        /// Gets or Sets End
        /// </summary>
        [DataMember(Name="end", EmitDefaultValue=false)]
        public string End { get; set; }

        /// <summary>
        /// Gets or Sets Active
        /// </summary>
        [DataMember(Name="active", EmitDefaultValue=false)]
        public string Active { get; set; }

        /// <summary>
        /// Gets or Sets RoundInterval
        /// </summary>
        [DataMember(Name="roundInterval", EmitDefaultValue=false)]
        public string RoundInterval { get; set; }

        /// <summary>
        /// Gets or Sets ClosedtTreasures
        /// </summary>
        [DataMember(Name="closedtTreasures", EmitDefaultValue=false)]
        public List<Treasure> ClosedtTreasures { get; set; }

        /// <summary>
        /// Gets or Sets OpenedTreasure
        /// </summary>
        [DataMember(Name="openedTreasure", EmitDefaultValue=false)]
        public List<OpenTreasure> OpenedTreasure { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Map {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Start: ").Append(Start).Append("\n");
            sb.Append("  End: ").Append(End).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  RoundInterval: ").Append(RoundInterval).Append("\n");
            sb.Append("  ClosedtTreasures: ").Append(ClosedtTreasures).Append("\n");
            sb.Append("  OpenedTreasure: ").Append(OpenedTreasure).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Map);
        }

        /// <summary>
        /// Returns true if Map instances are equal
        /// </summary>
        /// <param name="input">Instance of Map to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Map input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Start == input.Start ||
                    (this.Start != null &&
                    this.Start.Equals(input.Start))
                ) && 
                (
                    this.End == input.End ||
                    (this.End != null &&
                    this.End.Equals(input.End))
                ) && 
                (
                    this.Active == input.Active ||
                    (this.Active != null &&
                    this.Active.Equals(input.Active))
                ) && 
                (
                    this.RoundInterval == input.RoundInterval ||
                    (this.RoundInterval != null &&
                    this.RoundInterval.Equals(input.RoundInterval))
                ) && 
                (
                    this.ClosedtTreasures == input.ClosedtTreasures ||
                    this.ClosedtTreasures != null &&
                    input.ClosedtTreasures != null &&
                    this.ClosedtTreasures.SequenceEqual(input.ClosedtTreasures)
                ) && 
                (
                    this.OpenedTreasure == input.OpenedTreasure ||
                    this.OpenedTreasure != null &&
                    input.OpenedTreasure != null &&
                    this.OpenedTreasure.SequenceEqual(input.OpenedTreasure)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Start != null)
                    hashCode = hashCode * 59 + this.Start.GetHashCode();
                if (this.End != null)
                    hashCode = hashCode * 59 + this.End.GetHashCode();
                if (this.Active != null)
                    hashCode = hashCode * 59 + this.Active.GetHashCode();
                if (this.RoundInterval != null)
                    hashCode = hashCode * 59 + this.RoundInterval.GetHashCode();
                if (this.ClosedtTreasures != null)
                    hashCode = hashCode * 59 + this.ClosedtTreasures.GetHashCode();
                if (this.OpenedTreasure != null)
                    hashCode = hashCode * 59 + this.OpenedTreasure.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
