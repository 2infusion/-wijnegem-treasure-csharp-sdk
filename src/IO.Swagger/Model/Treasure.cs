/* 
 * ws-treasure
 *
 * tresure api
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Treasure
    /// </summary>
    [DataContract]
        public partial class Treasure :  IEquatable<Treasure>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Treasure" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="y">y (required).</param>
        /// <param name="x">x (required).</param>
        /// <param name="floorLevel">floorLevel (required).</param>
        public Treasure(string id = default(string), decimal? y = default(decimal?), decimal? x = default(decimal?), decimal? floorLevel = default(decimal?))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for Treasure and cannot be null");
            }
            else
            {
                this.Id = id;
            }
            // to ensure "y" is required (not null)
            if (y == null)
            {
                throw new InvalidDataException("y is a required property for Treasure and cannot be null");
            }
            else
            {
                this.Y = y;
            }
            // to ensure "x" is required (not null)
            if (x == null)
            {
                throw new InvalidDataException("x is a required property for Treasure and cannot be null");
            }
            else
            {
                this.X = x;
            }
            // to ensure "floorLevel" is required (not null)
            if (floorLevel == null)
            {
                throw new InvalidDataException("floorLevel is a required property for Treasure and cannot be null");
            }
            else
            {
                this.FloorLevel = floorLevel;
            }
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Y
        /// </summary>
        [DataMember(Name="y", EmitDefaultValue=false)]
        public decimal? Y { get; set; }

        /// <summary>
        /// Gets or Sets X
        /// </summary>
        [DataMember(Name="x", EmitDefaultValue=false)]
        public decimal? X { get; set; }

        /// <summary>
        /// Gets or Sets FloorLevel
        /// </summary>
        [DataMember(Name="floorLevel", EmitDefaultValue=false)]
        public decimal? FloorLevel { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Treasure {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Y: ").Append(Y).Append("\n");
            sb.Append("  X: ").Append(X).Append("\n");
            sb.Append("  FloorLevel: ").Append(FloorLevel).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Treasure);
        }

        /// <summary>
        /// Returns true if Treasure instances are equal
        /// </summary>
        /// <param name="input">Instance of Treasure to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Treasure input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Y == input.Y ||
                    (this.Y != null &&
                    this.Y.Equals(input.Y))
                ) && 
                (
                    this.X == input.X ||
                    (this.X != null &&
                    this.X.Equals(input.X))
                ) && 
                (
                    this.FloorLevel == input.FloorLevel ||
                    (this.FloorLevel != null &&
                    this.FloorLevel.Equals(input.FloorLevel))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Y != null)
                    hashCode = hashCode * 59 + this.Y.GetHashCode();
                if (this.X != null)
                    hashCode = hashCode * 59 + this.X.GetHashCode();
                if (this.FloorLevel != null)
                    hashCode = hashCode * 59 + this.FloorLevel.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
