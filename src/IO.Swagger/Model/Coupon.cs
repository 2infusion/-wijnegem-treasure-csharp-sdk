/* 
 * ws-treasure
 *
 * tresure api
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Coupon
    /// </summary>
    [DataContract]
        public partial class Coupon :  IEquatable<Coupon>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Coupon" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="title">title (required).</param>
        /// <param name="weight">weight (required).</param>
        /// <param name="description">description (required).</param>
        /// <param name="image">image (required).</param>
        /// <param name="code">code (required).</param>
        /// <param name="expireDate">expireDate (required).</param>
        /// <param name="validatedAt">validatedAt (required).</param>
        /// <param name="partner">partner (required).</param>
        /// <param name="openTreasure">openTreasure (required).</param>
        public Coupon(string id = default(string), string title = default(string), string weight = default(string), string description = default(string), string image = default(string), string code = default(string), string expireDate = default(string), string validatedAt = default(string), Partner partner = default(Partner), OpenTreasure openTreasure = default(OpenTreasure))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for Coupon and cannot be null");
            }
            else
            {
                this.Id = id;
            }
            // to ensure "title" is required (not null)
            if (title == null)
            {
                throw new InvalidDataException("title is a required property for Coupon and cannot be null");
            }
            else
            {
                this.Title = title;
            }
            // to ensure "weight" is required (not null)
            if (weight == null)
            {
                throw new InvalidDataException("weight is a required property for Coupon and cannot be null");
            }
            else
            {
                this.Weight = weight;
            }
            // to ensure "description" is required (not null)
            if (description == null)
            {
                throw new InvalidDataException("description is a required property for Coupon and cannot be null");
            }
            else
            {
                this.Description = description;
            }
            // to ensure "image" is required (not null)
            if (image == null)
            {
                throw new InvalidDataException("image is a required property for Coupon and cannot be null");
            }
            else
            {
                this.Image = image;
            }
            // to ensure "code" is required (not null)
            if (code == null)
            {
                throw new InvalidDataException("code is a required property for Coupon and cannot be null");
            }
            else
            {
                this.Code = code;
            }
            // to ensure "expireDate" is required (not null)
            if (expireDate == null)
            {
                throw new InvalidDataException("expireDate is a required property for Coupon and cannot be null");
            }
            else
            {
                this.ExpireDate = expireDate;
            }
            // to ensure "validatedAt" is required (not null)
            if (validatedAt == null)
            {
                throw new InvalidDataException("validatedAt is a required property for Coupon and cannot be null");
            }
            else
            {
                this.ValidatedAt = validatedAt;
            }
            // to ensure "partner" is required (not null)
            if (partner == null)
            {
                throw new InvalidDataException("partner is a required property for Coupon and cannot be null");
            }
            else
            {
                this.Partner = partner;
            }
            // to ensure "openTreasure" is required (not null)
            if (openTreasure == null)
            {
                throw new InvalidDataException("openTreasure is a required property for Coupon and cannot be null");
            }
            else
            {
                this.OpenTreasure = openTreasure;
            }
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets Weight
        /// </summary>
        [DataMember(Name="weight", EmitDefaultValue=false)]
        public string Weight { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Image
        /// </summary>
        [DataMember(Name="image", EmitDefaultValue=false)]
        public string Image { get; set; }

        /// <summary>
        /// Gets or Sets Code
        /// </summary>
        [DataMember(Name="code", EmitDefaultValue=false)]
        public string Code { get; set; }

        /// <summary>
        /// Gets or Sets ExpireDate
        /// </summary>
        [DataMember(Name="expireDate", EmitDefaultValue=false)]
        public string ExpireDate { get; set; }

        /// <summary>
        /// Gets or Sets ValidatedAt
        /// </summary>
        [DataMember(Name="validatedAt", EmitDefaultValue=false)]
        public string ValidatedAt { get; set; }

        /// <summary>
        /// Gets or Sets Partner
        /// </summary>
        [DataMember(Name="partner", EmitDefaultValue=false)]
        public Partner Partner { get; set; }

        /// <summary>
        /// Gets or Sets OpenTreasure
        /// </summary>
        [DataMember(Name="openTreasure", EmitDefaultValue=false)]
        public OpenTreasure OpenTreasure { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Coupon {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Weight: ").Append(Weight).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Image: ").Append(Image).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  ExpireDate: ").Append(ExpireDate).Append("\n");
            sb.Append("  ValidatedAt: ").Append(ValidatedAt).Append("\n");
            sb.Append("  Partner: ").Append(Partner).Append("\n");
            sb.Append("  OpenTreasure: ").Append(OpenTreasure).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Coupon);
        }

        /// <summary>
        /// Returns true if Coupon instances are equal
        /// </summary>
        /// <param name="input">Instance of Coupon to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Coupon input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.Weight == input.Weight ||
                    (this.Weight != null &&
                    this.Weight.Equals(input.Weight))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Image == input.Image ||
                    (this.Image != null &&
                    this.Image.Equals(input.Image))
                ) && 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.ExpireDate == input.ExpireDate ||
                    (this.ExpireDate != null &&
                    this.ExpireDate.Equals(input.ExpireDate))
                ) && 
                (
                    this.ValidatedAt == input.ValidatedAt ||
                    (this.ValidatedAt != null &&
                    this.ValidatedAt.Equals(input.ValidatedAt))
                ) && 
                (
                    this.Partner == input.Partner ||
                    (this.Partner != null &&
                    this.Partner.Equals(input.Partner))
                ) && 
                (
                    this.OpenTreasure == input.OpenTreasure ||
                    (this.OpenTreasure != null &&
                    this.OpenTreasure.Equals(input.OpenTreasure))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.Weight != null)
                    hashCode = hashCode * 59 + this.Weight.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Image != null)
                    hashCode = hashCode * 59 + this.Image.GetHashCode();
                if (this.Code != null)
                    hashCode = hashCode * 59 + this.Code.GetHashCode();
                if (this.ExpireDate != null)
                    hashCode = hashCode * 59 + this.ExpireDate.GetHashCode();
                if (this.ValidatedAt != null)
                    hashCode = hashCode * 59 + this.ValidatedAt.GetHashCode();
                if (this.Partner != null)
                    hashCode = hashCode * 59 + this.Partner.GetHashCode();
                if (this.OpenTreasure != null)
                    hashCode = hashCode * 59 + this.OpenTreasure.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
