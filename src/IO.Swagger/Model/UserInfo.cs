/* 
 * ws-treasure
 *
 * tresure api
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// UserInfo
    /// </summary>
    [DataContract]
        public partial class UserInfo :  IEquatable<UserInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserInfo" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="firstName">firstName (required).</param>
        /// <param name="lastname">lastname (required).</param>
        /// <param name="birthdate">birthdate (required).</param>
        /// <param name="gender">gender (required).</param>
        /// <param name="postalcode">postalcode (required).</param>
        /// <param name="inRelation">inRelation (required).</param>
        /// <param name="amountChildren">amountChildren (required).</param>
        public UserInfo(string id = default(string), string firstName = default(string), string lastname = default(string), string birthdate = default(string), string gender = default(string), string postalcode = default(string), bool? inRelation = default(bool?), decimal? amountChildren = default(decimal?))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for UserInfo and cannot be null");
            }
            else
            {
                this.Id = id;
            }
            // to ensure "firstName" is required (not null)
            if (firstName == null)
            {
                throw new InvalidDataException("firstName is a required property for UserInfo and cannot be null");
            }
            else
            {
                this.FirstName = firstName;
            }
            // to ensure "lastname" is required (not null)
            if (lastname == null)
            {
                throw new InvalidDataException("lastname is a required property for UserInfo and cannot be null");
            }
            else
            {
                this.Lastname = lastname;
            }
            // to ensure "birthdate" is required (not null)
            if (birthdate == null)
            {
                throw new InvalidDataException("birthdate is a required property for UserInfo and cannot be null");
            }
            else
            {
                this.Birthdate = birthdate;
            }
            // to ensure "gender" is required (not null)
            if (gender == null)
            {
                throw new InvalidDataException("gender is a required property for UserInfo and cannot be null");
            }
            else
            {
                this.Gender = gender;
            }
            // to ensure "postalcode" is required (not null)
            if (postalcode == null)
            {
                throw new InvalidDataException("postalcode is a required property for UserInfo and cannot be null");
            }
            else
            {
                this.Postalcode = postalcode;
            }
            // to ensure "inRelation" is required (not null)
            if (inRelation == null)
            {
                throw new InvalidDataException("inRelation is a required property for UserInfo and cannot be null");
            }
            else
            {
                this.InRelation = inRelation;
            }
            // to ensure "amountChildren" is required (not null)
            if (amountChildren == null)
            {
                throw new InvalidDataException("amountChildren is a required property for UserInfo and cannot be null");
            }
            else
            {
                this.AmountChildren = amountChildren;
            }
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets FirstName
        /// </summary>
        [DataMember(Name="firstName", EmitDefaultValue=false)]
        public string FirstName { get; set; }

        /// <summary>
        /// Gets or Sets Lastname
        /// </summary>
        [DataMember(Name="lastname", EmitDefaultValue=false)]
        public string Lastname { get; set; }

        /// <summary>
        /// Gets or Sets Birthdate
        /// </summary>
        [DataMember(Name="birthdate", EmitDefaultValue=false)]
        public string Birthdate { get; set; }

        /// <summary>
        /// Gets or Sets Gender
        /// </summary>
        [DataMember(Name="gender", EmitDefaultValue=false)]
        public string Gender { get; set; }

        /// <summary>
        /// Gets or Sets Postalcode
        /// </summary>
        [DataMember(Name="postalcode", EmitDefaultValue=false)]
        public string Postalcode { get; set; }

        /// <summary>
        /// Gets or Sets InRelation
        /// </summary>
        [DataMember(Name="inRelation", EmitDefaultValue=false)]
        public bool? InRelation { get; set; }

        /// <summary>
        /// Gets or Sets AmountChildren
        /// </summary>
        [DataMember(Name="amountChildren", EmitDefaultValue=false)]
        public decimal? AmountChildren { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserInfo {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  Lastname: ").Append(Lastname).Append("\n");
            sb.Append("  Birthdate: ").Append(Birthdate).Append("\n");
            sb.Append("  Gender: ").Append(Gender).Append("\n");
            sb.Append("  Postalcode: ").Append(Postalcode).Append("\n");
            sb.Append("  InRelation: ").Append(InRelation).Append("\n");
            sb.Append("  AmountChildren: ").Append(AmountChildren).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserInfo);
        }

        /// <summary>
        /// Returns true if UserInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of UserInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.FirstName == input.FirstName ||
                    (this.FirstName != null &&
                    this.FirstName.Equals(input.FirstName))
                ) && 
                (
                    this.Lastname == input.Lastname ||
                    (this.Lastname != null &&
                    this.Lastname.Equals(input.Lastname))
                ) && 
                (
                    this.Birthdate == input.Birthdate ||
                    (this.Birthdate != null &&
                    this.Birthdate.Equals(input.Birthdate))
                ) && 
                (
                    this.Gender == input.Gender ||
                    (this.Gender != null &&
                    this.Gender.Equals(input.Gender))
                ) && 
                (
                    this.Postalcode == input.Postalcode ||
                    (this.Postalcode != null &&
                    this.Postalcode.Equals(input.Postalcode))
                ) && 
                (
                    this.InRelation == input.InRelation ||
                    (this.InRelation != null &&
                    this.InRelation.Equals(input.InRelation))
                ) && 
                (
                    this.AmountChildren == input.AmountChildren ||
                    (this.AmountChildren != null &&
                    this.AmountChildren.Equals(input.AmountChildren))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.FirstName != null)
                    hashCode = hashCode * 59 + this.FirstName.GetHashCode();
                if (this.Lastname != null)
                    hashCode = hashCode * 59 + this.Lastname.GetHashCode();
                if (this.Birthdate != null)
                    hashCode = hashCode * 59 + this.Birthdate.GetHashCode();
                if (this.Gender != null)
                    hashCode = hashCode * 59 + this.Gender.GetHashCode();
                if (this.Postalcode != null)
                    hashCode = hashCode * 59 + this.Postalcode.GetHashCode();
                if (this.InRelation != null)
                    hashCode = hashCode * 59 + this.InRelation.GetHashCode();
                if (this.AmountChildren != null)
                    hashCode = hashCode * 59 + this.AmountChildren.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
