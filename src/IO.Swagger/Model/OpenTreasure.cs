/* 
 * ws-treasure
 *
 * tresure api
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// OpenTreasure
    /// </summary>
    [DataContract]
        public partial class OpenTreasure :  IEquatable<OpenTreasure>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OpenTreasure" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="treasure">treasure (required).</param>
        /// <param name="coupon">coupon (required).</param>
        /// <param name="round">round (required).</param>
        /// <param name="createAt">createAt (required).</param>
        public OpenTreasure(string id = default(string), Treasure treasure = default(Treasure), Coupon coupon = default(Coupon), decimal? round = default(decimal?), string createAt = default(string))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for OpenTreasure and cannot be null");
            }
            else
            {
                this.Id = id;
            }
            // to ensure "treasure" is required (not null)
            if (treasure == null)
            {
                throw new InvalidDataException("treasure is a required property for OpenTreasure and cannot be null");
            }
            else
            {
                this.Treasure = treasure;
            }
            // to ensure "coupon" is required (not null)
            if (coupon == null)
            {
                throw new InvalidDataException("coupon is a required property for OpenTreasure and cannot be null");
            }
            else
            {
                this.Coupon = coupon;
            }
            // to ensure "round" is required (not null)
            if (round == null)
            {
                throw new InvalidDataException("round is a required property for OpenTreasure and cannot be null");
            }
            else
            {
                this.Round = round;
            }
            // to ensure "createAt" is required (not null)
            if (createAt == null)
            {
                throw new InvalidDataException("createAt is a required property for OpenTreasure and cannot be null");
            }
            else
            {
                this.CreateAt = createAt;
            }
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Treasure
        /// </summary>
        [DataMember(Name="treasure", EmitDefaultValue=false)]
        public Treasure Treasure { get; set; }

        /// <summary>
        /// Gets or Sets Coupon
        /// </summary>
        [DataMember(Name="coupon", EmitDefaultValue=false)]
        public Coupon Coupon { get; set; }

        /// <summary>
        /// Gets or Sets Round
        /// </summary>
        [DataMember(Name="round", EmitDefaultValue=false)]
        public decimal? Round { get; set; }

        /// <summary>
        /// Gets or Sets CreateAt
        /// </summary>
        [DataMember(Name="createAt", EmitDefaultValue=false)]
        public string CreateAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OpenTreasure {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Treasure: ").Append(Treasure).Append("\n");
            sb.Append("  Coupon: ").Append(Coupon).Append("\n");
            sb.Append("  Round: ").Append(Round).Append("\n");
            sb.Append("  CreateAt: ").Append(CreateAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OpenTreasure);
        }

        /// <summary>
        /// Returns true if OpenTreasure instances are equal
        /// </summary>
        /// <param name="input">Instance of OpenTreasure to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OpenTreasure input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Treasure == input.Treasure ||
                    (this.Treasure != null &&
                    this.Treasure.Equals(input.Treasure))
                ) && 
                (
                    this.Coupon == input.Coupon ||
                    (this.Coupon != null &&
                    this.Coupon.Equals(input.Coupon))
                ) && 
                (
                    this.Round == input.Round ||
                    (this.Round != null &&
                    this.Round.Equals(input.Round))
                ) && 
                (
                    this.CreateAt == input.CreateAt ||
                    (this.CreateAt != null &&
                    this.CreateAt.Equals(input.CreateAt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Treasure != null)
                    hashCode = hashCode * 59 + this.Treasure.GetHashCode();
                if (this.Coupon != null)
                    hashCode = hashCode * 59 + this.Coupon.GetHashCode();
                if (this.Round != null)
                    hashCode = hashCode * 59 + this.Round.GetHashCode();
                if (this.CreateAt != null)
                    hashCode = hashCode * 59 + this.CreateAt.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
