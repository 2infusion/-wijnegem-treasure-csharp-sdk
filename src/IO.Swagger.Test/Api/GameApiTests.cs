/* 
 * ws-treasure
 *
 * tresure api
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing GameApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class GameApiTests
    {
        private GameApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new GameApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of GameApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' GameApi
            //Assert.IsInstanceOfType(typeof(GameApi), instance, "instance is a GameApi");
        }

        /// <summary>
        /// Test CreateUserInfo
        /// </summary>
        [Test]
        public void CreateUserInfoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UserInfo body = null;
            //var response = instance.CreateUserInfo(body);
            //Assert.IsInstanceOf<UserInfo> (response, "response is UserInfo");
        }
        /// <summary>
        /// Test GameControllerLeaderBoardTotal
        /// </summary>
        [Test]
        public void GameControllerLeaderBoardTotalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GameControllerLeaderBoardTotal();
            //Assert.IsInstanceOf<Coupon> (response, "response is Coupon");
        }
        /// <summary>
        /// Test Map
        /// </summary>
        [Test]
        public void MapTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.Map();
            //Assert.IsInstanceOf<Dictionary> (response, "response is Dictionary");
        }
        /// <summary>
        /// Test MyCoupons
        /// </summary>
        [Test]
        public void MyCouponsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.MyCoupons();
            //Assert.IsInstanceOf<List<Coupon>> (response, "response is List<Coupon>");
        }
        /// <summary>
        /// Test UnlockTreasureById
        /// </summary>
        [Test]
        public void UnlockTreasureByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UnlockTreasure body = null;
            //var response = instance.UnlockTreasureById(body);
            //Assert.IsInstanceOf<OpenTreasure> (response, "response is OpenTreasure");
        }
        /// <summary>
        /// Test ValidateCouponById
        /// </summary>
        [Test]
        public void ValidateCouponByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UnlockTreasure body = null;
            //var response = instance.ValidateCouponById(body);
            //Assert.IsInstanceOf<Coupon> (response, "response is Coupon");
        }
    }

}
