/* 
 * ws-treasure
 *
 * tresure api
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing PartnerApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class PartnerApiTests
    {
        private PartnerApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new PartnerApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of PartnerApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' PartnerApi
            //Assert.IsInstanceOfType(typeof(PartnerApi), instance, "instance is a PartnerApi");
        }

        /// <summary>
        /// Test PartnerControllerCreateManyBase
        /// </summary>
        [Test]
        public void PartnerControllerCreateManyBaseTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CreateManyPartnerDto body = null;
            //var response = instance.PartnerControllerCreateManyBase(body);
            //Assert.IsInstanceOf<List<Partner>> (response, "response is List<Partner>");
        }
        /// <summary>
        /// Test PartnerControllerCreateOneBase
        /// </summary>
        [Test]
        public void PartnerControllerCreateOneBaseTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Partner body = null;
            //var response = instance.PartnerControllerCreateOneBase(body);
            //Assert.IsInstanceOf<Partner> (response, "response is Partner");
        }
        /// <summary>
        /// Test PartnerControllerDeleteOneBase
        /// </summary>
        [Test]
        public void PartnerControllerDeleteOneBaseTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.PartnerControllerDeleteOneBase(id);
            
        }
        /// <summary>
        /// Test PartnerControllerGetManyBase
        /// </summary>
        [Test]
        public void PartnerControllerGetManyBaseTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<string> fields = null;
            //string s = null;
            //List<string> filter = null;
            //List<string> or = null;
            //List<string> sort = null;
            //List<string> join = null;
            //int? limit = null;
            //int? offset = null;
            //int? page = null;
            //int? cache = null;
            //var response = instance.PartnerControllerGetManyBase(fields, s, filter, or, sort, join, limit, offset, page, cache);
            //Assert.IsInstanceOf<InlineResponse200> (response, "response is InlineResponse200");
        }
        /// <summary>
        /// Test PartnerControllerGetOneBase
        /// </summary>
        [Test]
        public void PartnerControllerGetOneBaseTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //List<string> fields = null;
            //List<string> join = null;
            //int? cache = null;
            //var response = instance.PartnerControllerGetOneBase(id, fields, join, cache);
            //Assert.IsInstanceOf<Partner> (response, "response is Partner");
        }
        /// <summary>
        /// Test PartnerControllerReplaceOneBase
        /// </summary>
        [Test]
        public void PartnerControllerReplaceOneBaseTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Partner body = null;
            //string id = null;
            //var response = instance.PartnerControllerReplaceOneBase(body, id);
            //Assert.IsInstanceOf<Partner> (response, "response is Partner");
        }
        /// <summary>
        /// Test PartnerControllerUpdateOneBase
        /// </summary>
        [Test]
        public void PartnerControllerUpdateOneBaseTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Partner body = null;
            //string id = null;
            //var response = instance.PartnerControllerUpdateOneBase(body, id);
            //Assert.IsInstanceOf<Partner> (response, "response is Partner");
        }
    }

}
